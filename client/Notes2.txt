/*Front-End*/
index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import { store, persistor } from "redux/Store";
import { PersistGate } from "redux-persist/integration/react";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <App />
    </PersistGate>
  </Provider>
);




App.tsx
import React from "react";
import { BrowserRouter, Navigate, Route, Routes } from "react-router-dom";
import "./App.css";
import { AuthProvider } from "context/authContext";
import ProtectedRoute from "protectedRoute/ProtectedRoute";
import LoginPage from "pages/Login/LoginPage";
import Layout from "components/Layout/Layout";
import Dashboard from "pages/Dashboard/DashboardPage";
import ProfilePage from "pages/Profile/ProfilePage/ProfilePage";
import ProfileUpdatePage from "pages/Profile/ProfileUpdatePage/ProfileUpdatePage";

function App() {
  return (
    <>
      <AuthProvider>
        <BrowserRouter>
          <Routes>
            <Route path="/login" element={<LoginPage />} />
            <Route
              path="/"
              element={
                <ProtectedRoute>
                  <Layout />
                </ProtectedRoute>
              }
            >
              <Route index element={<Navigate to="/dashboard" replace />} />
              <Route
                path="/dashboard"
                element={
                  <ProtectedRoute>
                    <Dashboard />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/profile"
                element={
                  <ProtectedRoute>
                    <ProfilePage />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/profile/updateprofile/:id"
                element={
                  <ProtectedRoute>
                    <ProfileUpdatePage />
                  </ProtectedRoute>
                }
              />
            </Route>
          </Routes>
        </BrowserRouter>
      </AuthProvider>
    </>
  );
}

export default App;




type.ts
export const enum AuthActionTypes {
  LOGIN_SUCCESS = "LOGIN_SUCCESS",
  LOGIN_FAILURE = "LOGIN_FAILURE",
  LOGOUT = "LOGOUT",
  GET_USER_SUCCESS = "GET_USER_SUCCESS",
  GET_USER_FAILURE = "GET_USER_FAILURE",
  UPDATE_USER_SUCCESS = "UPDATE_USER_SUCCESS",
  UPDATE_USER_FAILURE = "UPDATE_USER_FAILURE",
}
export interface User {
  _id?: string; // Change the type of _id from number to string since it's commonly represented as a string in MongoDB.
  firstname: string;
  lastname: string;
  phone: string;
  email: string;
  role?: string;
  createdAt?: any;
  updatedAt?: any;
}
export interface AuthState {
  token: string | null;
  error: string | null;
}
export interface UserState {
  user: User | null;
  error: string | null;
}




Reducer.ts
import { AuthActionTypes, AuthState, UserState } from "./types/authTypes";

const initialLoginState: AuthState = {
  token: null,
  error: null,
};
export const LoginAuthReducer = (
  state = initialLoginState,
  action: any
): AuthState => {
  switch (action.type) {
    case AuthActionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        token: action.payload,
        error: null,
      };
    case AuthActionTypes.LOGIN_FAILURE:
      return {
        ...state,
        token: null,
        error: action.payload,
      };
    case AuthActionTypes.LOGOUT:
      return {
        ...state,
        token: null,
        error: null,
      };
    default:
      return state;
  }
};

const initialUserState: UserState = {
  user: null,
  error: null,
};

export const UserReducer = (
  state = initialUserState,
  action: any
): UserState => {
  switch (action.type) {
    case AuthActionTypes.GET_USER_SUCCESS:
      return {
        ...state,
        user: action.payload,
        error: null,
      };
    case AuthActionTypes.GET_USER_FAILURE:
      return {
        ...state,
        user: null,
        error: action.payload,
      };
    case AuthActionTypes.UPDATE_USER_SUCCESS:
      return {
        ...state,
        user: action.payload,
        error: null,
      };
    case AuthActionTypes.UPDATE_USER_FAILURE:
      return {
        ...state,
        error: action.payload,
      };
    default:
      return state;
  }
};



combineReducer.ts
import { combineReducers } from "redux";
import { AuthState, UserState } from "./types/authTypes";
import { LoginAuthReducer, UserReducer } from "../redux/Reducer";

export interface RootState {
  LoginAuthReducer: AuthState;
  UserReducer: UserState;
}

const rootReducer = combineReducers({
  LoginAuthReducer,
  UserReducer,
});

export default rootReducer;




Store.ts
import { configureStore } from "@reduxjs/toolkit";
import thunk from "redux-thunk";
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";
import rootReducer from "./combineReducer";

const persistConfig = {
  key: "auth",
  storage,
  whitelist: ["LoginAuthReducer"],
};

const persistedReducer = persistReducer(persistConfig, rootReducer);
const store = configureStore({
  reducer: persistedReducer,
  middleware: [thunk],
});
const persistor = persistStore(store);

export { store, persistor };




Action.ts
import axios from "axios";
import { Dispatch } from "redux";
import { AuthActionTypes, User } from "./types/authTypes";

interface LoginRequestPayload {
  email: string;
  password: string;
}

export const login =
  (payload: LoginRequestPayload) => async (dispatch: Dispatch) => {
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API}/api/login`,
        payload
      );
      const { token } = response.data.result;
      dispatch({ type: AuthActionTypes.LOGIN_SUCCESS, payload: token });
      return response;
    } catch (error: any) {
      console.log(error);
      dispatch({
        type: AuthActionTypes.LOGIN_FAILURE,
        payload: error.response.data.message,
      });
      throw error;
    }
  };

export const getUser = () => async (dispatch: Dispatch, getState: any) => {
  try {
    const token = getState().LoginAuthReducer.token;
    if (!token) {
      throw new Error("Token not found");
    }
    const response = await axios.get(
      `${process.env.REACT_APP_API}/api/getuser`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    dispatch({
      type: AuthActionTypes.GET_USER_SUCCESS,
      payload: response.data.user,
    });
  } catch (error) {
    console.log(error);
    dispatch({
      type: AuthActionTypes.GET_USER_FAILURE,
      payload: "Error fetching user data.",
    });
  }
};

export const updateUser =
  (updatedUserData: User) => async (dispatch: Dispatch, getState: any) => {
    try {
      const token = getState().LoginAuthReducer.token;
      if (!token) {
        throw new Error("Token not found");
      }
      await axios.put(
        `${process.env.REACT_APP_API}/api/updateuser/${updatedUserData._id}`,
        updatedUserData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      dispatch({
        type: AuthActionTypes.UPDATE_USER_SUCCESS,
        payload: updatedUserData,
      });
    } catch (error) {
      console.log(error);
      dispatch({
        type: AuthActionTypes.UPDATE_USER_FAILURE,
        payload: "Error updating user data.",
      });
    }
  };

export const logout = () => (dispatch: Dispatch) => {
  dispatch({ type: AuthActionTypes.LOGOUT });
};




ProtectedRoute.tsx
import React from "react";
import useAuth from "../context/authContext";
import { Navigate, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";

const ProtectedRoute = ({ children }: any) => {
  const { authed }: any = useAuth();
  const { location }: any = useLocation();
  const accessToken = useSelector((state: any) => state.LoginAuthReducer.token);

  return (
    <>
      {authed === true || accessToken ? (
        children
      ) : (
        <Navigate to={"/login"} replace state={location?.pathname} />
      )}
    </>
  );
};

export default ProtectedRoute;




Profile.tsx
import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { Typography, Container, Button } from "@mui/material";
import { RootState } from "redux/combineReducer";
import { getUser } from "redux/Action";
import { useNavigate } from "react-router-dom";

const Profile: React.FC = () => {
  const user = useSelector((state: RootState) => state.UserReducer.user);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {
    dispatch<any>(getUser());
  }, [dispatch]);

  return (
    <Container maxWidth="sm">
      <Typography variant="h5" align="center" gutterBottom>
        User Profile
      </Typography>
      {user ? (
        <div>
          <Typography variant="body1" gutterBottom>
            <strong>First Name:</strong> {user.firstname}
          </Typography>
          <Typography variant="body1" gutterBottom>
            <strong>Last Name:</strong> {user.lastname}
          </Typography>
          <Typography variant="body1" gutterBottom>
            <strong>Email:</strong> {user.email}
          </Typography>
          <Typography variant="body1" gutterBottom>
            <strong>Phone:</strong> {user.phone}
          </Typography>
          <Button
            variant="outlined"
            color="primary"
            onClick={() => navigate(`/profile/updateprofile/${user._id}`)}
          >
            Update Profile
          </Button>
        </div>
      ) : (
        <Typography variant="body1" align="center">
          Loading...
        </Typography>
      )}
    </Container>
  );
};

export default Profile;




ProfileUpdatePage.tsx
import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { Button, TextField, Typography, Container } from "@mui/material";
import { User } from "redux/types/authTypes";
import { RootState } from "redux/combineReducer";
import { getUser, updateUser } from "redux/Action";
import { useNavigate } from "react-router-dom";

const UpdateProfile: React.FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const user = useSelector((state: RootState) => state.UserReducer.user);
  const [formData, setFormData] = useState<User | null>(null);

  useEffect(() => {
    if (user) {
      setFormData(user);
    } else {
      dispatch<any>(getUser());
    }
  }, [dispatch, user]);

  const handleUpdate = (event: React.FormEvent) => {
    event.preventDefault();
    if (formData) {
      dispatch<any>(updateUser(formData));
      navigate("/profile");
    }
  };

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (formData) {
      setFormData({
        ...formData,
        [event.target.name]: event.target.value,
      });
    }
  };

  return (
    <Container maxWidth="sm">
      <Typography variant="h5" align="center" gutterBottom>
        Update Profile
      </Typography>
      {formData ? (
        <form onSubmit={handleUpdate}>
          <TextField
            fullWidth
            margin="normal"
            label="First Name"
            name="firstname"
            value={formData.firstname}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Last Name"
            name="lastname"
            value={formData.lastname}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Email"
            name="email"
            value={formData.email}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Phone"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
          />
          <Button variant="contained" color="primary" type="submit">
            Update Profile
          </Button>
        </form>
      ) : (
        <Typography variant="body1" align="center">
          Loading...
        </Typography>
      )}
    </Container>
  );
};

export default UpdateProfile;




LoginPage.tsx
import React, { useEffect, useState } from "react";
import {
  TextField,
  Button,
  Container,
  Box,
  Typography,
  InputAdornment,
  IconButton,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { useDispatch } from "react-redux";
import { login } from "redux/Action";
import { useNavigate } from "react-router-dom";
import useAuth from "../../context/authContext";
import "../Login/LoginPage.css";

const LoginPage = (): JSX.Element => {
  const [email, setEmail] = useState<any>("");
  const [password, setPassword] = useState<any>("");
  const [error, setError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleMouseDownPassword = (event: any) => event.preventDefault();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loginHandle }: any = useAuth();

  const showErrorWithTimeout = (errorMessage: string, timeout: number) => {
    setError(errorMessage);
    setTimeout(() => {
      setError(null);
    }, timeout);
  };
  useEffect(() => {
    setError(null);
  }, [email, password]);

  const handleLogin = async (e: any) => {
    e.preventDefault();
    if (!email && !password) {
      showErrorWithTimeout("Please Enter both Email and Password", 4000);
      return;
    }
    if (!email) {
      showErrorWithTimeout("Please Enter a Valid Email", 4000);
      return;
    }
    if (!password) {
      showErrorWithTimeout("Please Enter a Valid Password", 4000);
      return;
    }
    try {
      const response = await dispatch<any>(
        login({ email: email, password: password })
      );
      if (!!response && response.data.success === true) {
        loginHandle();
        navigate("/");
      }
      setEmail("");
      setPassword("");
    } catch (error: any) {
      console.log(error);
      showErrorWithTimeout(error.response.data.message, 4000);
    }
  };

  return (
    <>
      <Container component="main" maxWidth="xs">
        <Box className="login-Outlet-box">
          <Typography variant="h4" component="h1" className="login-title">
            Login
          </Typography>
          {error && (
            <Typography color="error" fontWeight={700} paddingTop={2}>
              {error}
            </Typography>
          )}
          <form onSubmit={handleLogin}>
            <TextField
              margin="normal"
              fullWidth
              id="email"
              label="Email"
              type="email"
              value={email}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setEmail(e.target.value)}
            />
            <TextField
              margin="normal"
              autoComplete="action"
              fullWidth
              id="password"
              label="Password"
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setPassword(e.target.value)}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <Button
              type="submit"
              fullWidth
              size="large"
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              Login
            </Button>
          </form>
          <Typography
            variant="caption"
            fontSize={15}
            color={"blue"}
            sx={{ textDecoration: "underline", cursor: "pointer" }}
          >
            Forget Password
          </Typography>
        </Box>
      </Container>
    </>
  );
};

export default LoginPage;




Dashboard.tsx
import { Box, Card, CardContent, Grid, Typography } from "@mui/material";
import React from "react";
import "../Dashboard/DashboardPage.css";

const Dashboard = (): JSX.Element => {
  return (
    <>
      <Grid container padding={2} spacing={1}>
        <Grid item lg={3} md={6} sm={12} xs={12}>
          <Card className="card card-1">
            <Box className="card-box" />
            <Box sx={{ display: "flex", flexDirection: "column" }}>
              <CardContent>
                <Typography
                  component="div"
                  variant="h5"
                  sx={{ fontSize: "2rem", position: "relative", zIndex: 1 }}
                >
                  Card 1
                </Typography>
                <Typography
                  variant="subtitle1"
                  color="#fff"
                  component="div"
                  sx={{ position: "relative", zIndex: 1 }}
                >
                  Lorem ipsum dolor sit
                </Typography>
              </CardContent>
            </Box>
          </Card>
        </Grid>
        <Grid item lg={3} md={6} sm={12} xs={12}>
          <Card className="card card-2">
            <Box className="card-box" />
            <Box sx={{ display: "flex", flexDirection: "column" }}>
              <CardContent>
                <Typography
                  component="div"
                  variant="h5"
                  sx={{ fontSize: "2rem", position: "relative", zIndex: 1 }}
                >
                  Card 2
                </Typography>
                <Typography
                  variant="subtitle1"
                  color="#fff"
                  component="div"
                  sx={{ position: "relative", zIndex: 1 }}
                >
                  Lorem ipsum dolor sit
                </Typography>
              </CardContent>
            </Box>
          </Card>
        </Grid>
        <Grid item lg={3} md={6} sm={12} xs={12}>
          <Card className="card card-3">
            <Box className="card-box" />
            <Box sx={{ display: "flex", flexDirection: "column" }}>
              <CardContent>
                <Typography
                  component="div"
                  variant="h5"
                  sx={{ fontSize: "2rem", position: "relative", zIndex: 1 }}
                >
                  Card 3
                </Typography>
                <Typography
                  variant="subtitle1"
                  color="#fff"
                  component="div"
                  sx={{ position: "relative", zIndex: 1 }}
                >
                  Lorem ipsum dolor sit
                </Typography>
              </CardContent>
            </Box>
          </Card>
        </Grid>
        <Grid item lg={3} md={6} sm={12} xs={12}>
          <Card className="card card-4">
            <Box className="card-box" />
            <Box sx={{ display: "flex", flexDirection: "column" }}>
              <CardContent>
                <Typography
                  component="div"
                  variant="h5"
                  sx={{ fontSize: "2rem", position: "relative", zIndex: 1 }}
                >
                  Card 4
                </Typography>
                <Typography
                  variant="subtitle1"
                  color="#fff"
                  component="div"
                  sx={{ position: "relative", zIndex: 1 }}
                >
                  Lorem ipsum dolor sit
                </Typography>
              </CardContent>
            </Box>
          </Card>
        </Grid>
      </Grid>
    </>
  );
};

export default Dashboard;




Loader.tsx
import React from "react";
import CircularProgress from "@mui/material/CircularProgress";
import { Box } from "@mui/material";

const Loader = () => {
  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        // height: "100vh",
      }}
    >
      <CircularProgress />
    </Box>
  );
};

export default Loader;




Context.tsx
import React, { ReactNode, createContext, useContext, useState } from "react";

interface AuthContextType {
  authed: boolean;
  loginHandle: () => Promise<void>;
  logoutHandle: () => Promise<void>;
}

const authContext = createContext<AuthContextType | null>(null);

function useAuth(): AuthContextType {
  const [authed, setAuthed] = useState(false);

  const loginHandle = () => {
    return new Promise<void>(() => {
      setAuthed(true);
    });
  };

  const logoutHandle = () => {
    return new Promise<void>(() => {
      setAuthed(false);
    });
  };

  return {
    authed,
    loginHandle,
    logoutHandle,
  };
}

export function AuthProvider({ children }: { children: ReactNode }) {
  const auth = useAuth();
  return <authContext.Provider value={auth}>{children}</authContext.Provider>;
}

export function AuthConsumer() {
  return useContext(authContext);
}

export default AuthConsumer;




Layout.tsx
import { Grid } from "@mui/material";
import React, { useState } from "react";
import "../Layout/Layout.css";
import { Outlet } from "react-router-dom";
import Sidebar from "../Sidebar/Sidebar";
import Navbar from "../Navbar/Navbar";

const Layout = (): JSX.Element => {
  const [isOpen, setIsClose] = useState<boolean>(true);

  const toggleSidebar = () => {
    setIsClose((toogle) => !toogle);
  };
  return (
    <div>
      <Grid className="layout">
        <Grid className={isOpen ? "layout-sidebar" : "layout-sidebar-sm"}>
          <Sidebar />
        </Grid>
        <Grid className="layout-navbar">
          <Navbar toogleSidebar={toggleSidebar} />
        </Grid>
        <Grid className="outlet">
          <Outlet />
        </Grid>
      </Grid>
    </div>
  );
};

export default Layout;




Sidebar.tsx
import React from "react";
import {
  Divider,
  Grid,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Tooltip,
  Zoom,
} from "@mui/material";
import { Dashboard, Logout, Person } from "@mui/icons-material";
import "../Sidebar/Sidebar.css";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { logout } from "redux/Action";
import useAuth from "../../context/authContext";
import { NavLink } from "react-router-dom";

const Sidebar = (): JSX.Element => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { logoutHandle }: any = useAuth();

  const handleLogout = () => {
    dispatch<any>(logout());
    logoutHandle();
    navigate("/login");
  };
  return (
    <>
      <Grid className="sidebar">
        <Grid item lg={12} sm={6} xs={3}>
          <Toolbar />
          <Divider />

          <NavLink to={"/dashboard"} className={"link"}>
            <ListItem disablePadding className="sidebar-item">
              <Tooltip
                title={"Dashboard"}
                arrow
                TransitionComponent={Zoom}
                enterDelay={800}
                leaveDelay={200}
                placement="bottom"
              >
                <ListItemButton className="sidebar-listitem-btn">
                  <ListItemIcon className="sidebar-icon">
                    <Dashboard />
                  </ListItemIcon>
                  <ListItemText
                    primary="Dashboard"
                    sx={{ whiteSpace: "nowrap" }}
                  />
                </ListItemButton>
              </Tooltip>
            </ListItem>
          </NavLink>
          <Divider />

          <NavLink to={"/profile"} className={"link"}>
            <ListItem disablePadding className="sidebar-item">
              <Tooltip
                title={"Profile"}
                arrow
                TransitionComponent={Zoom}
                enterDelay={800}
                leaveDelay={200}
                placement="bottom"
              >
                <ListItemButton className="sidebar-listitem-btn">
                  <ListItemIcon className="sidebar-icon">
                    <Person />
                  </ListItemIcon>
                  <ListItemText
                    primary="Profile"
                    sx={{ whiteSpace: "nowrap" }}
                  />
                </ListItemButton>
              </Tooltip>
            </ListItem>
          </NavLink>
          <Divider />

          <ListItem disablePadding className="sidebar-item logout">
            <Tooltip
              title={"Logout"}
              arrow
              TransitionComponent={Zoom}
              enterDelay={800}
              leaveDelay={200}
              placement="bottom"
            >
              <ListItemButton
                className="sidebar-listitem-btn"
                onClick={handleLogout}
              >
                <ListItemIcon className="sidebar-icon">
                  <Logout />
                </ListItemIcon>
                <ListItemText primary="Logout" sx={{ whiteSpace: "nowrap" }} />
              </ListItemButton>
            </Tooltip>
          </ListItem>
          <Divider />
        </Grid>
      </Grid>
    </>
  );
};

export default Sidebar;




Navbar.tsx
import React, { useState } from "react";
import { AppBar, Grid, Toolbar, Typography } from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import "../Navbar/Navbar.css";
import { useSelector } from "react-redux";
import jwtDecode from "jwt-decode";

interface NavbarProps {
  decodeToken?: {};
  user: {
    firstname: string;
    lastname: string;
    role: string;
  };
}
const Navbar = ({ toogleSidebar }: any): JSX.Element => {
  const token = useSelector((state: any) => state.LoginAuthReducer.token);
  const decodeToken: NavbarProps = jwtDecode(token);
  const name = decodeToken.user.firstname + " " + decodeToken.user.lastname;
  const role = decodeToken.user.role;

  const [isOpen, setOpen] = useState<boolean>(false);
  const toogleSiderbar = () => {
    setOpen(!isOpen);
    toogleSidebar(isOpen);
  };
  return (
    <div>
      <Grid className="navbar">
        <AppBar className="appbar">
          <Toolbar className="toolbar-navbar">
            <MenuIcon className="menu-icon" onClick={toogleSiderbar} />
            <Grid className="navbar-name-content-center">
              <Typography className="navbar-title">Panel</Typography>
              <Typography className="navbar-name">
                <span className="loggedInRole">{role.toUpperCase()}:</span>
                <span className="loggedInName"> {name.toUpperCase()}</span>
              </Typography>
            </Grid>
          </Toolbar>
        </AppBar>
      </Grid>
    </div>
  );
};

export default Navbar;




package.json
"dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.1",
    "@mui/material": "^5.14.1",
    "@mui/styled-engine-sc": "^5.12.0",
    "@reduxjs/toolkit": "^1.9.5",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^13.0.0",
    "@testing-library/user-event": "^13.2.1",
    "@types/axios": "^0.14.0",
    "@types/jest": "^27.0.1",
    "@types/jwt-decode": "^3.1.0",
    "@types/node": "^16.7.13",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@types/react-redux": "^7.1.25",
    "@types/react-router-dom": "^5.3.3",
    "@types/react-toastify": "^4.1.0",
    "@types/redux": "^3.6.0",
    "@types/redux-persist": "^4.3.1",
    "@types/redux-thunk": "^2.1.0",
    "axios": "^1.4.0",
    "dotenv": "^16.3.1",
    "jwt-decode": "^3.1.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.1.1",
    "react-router-dom": "^6.14.2",
    "react-scripts": "5.0.1",
    "react-toastify": "^9.1.3",
    "redux": "^4.2.1",
    "redux-persist": "^6.0.0",
    "redux-thunk": "^2.4.2",
    "styled-components": "^6.0.5",
    "typescript": "^4.4.2",
    "web-vitals": "^2.1.0"
  },



/*Back-End*/
index.js
const express = require('express');
const app = express();
require('dotenv').config();
const cors = require("cors");
app.use(cors());
const mongoose = require('mongoose');
const User = require('./models/UserSchema');
const bodyParser = require('body-parser');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
const colors = require("colors");
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const authMiddleware = require("./middleware/authMiddleware");

mongoose.connect(process.env.MONGO_URL).then(e => {
     console.log(`Connection established with Database`.bgGreen.white)
});
const PORT = process.env.PORT || 9936;
app.listen(PORT, () => {
     console.log(`connection successfull with ${PORT}`.bgWhite.white)
});
app.get('/', (req, res) => {
     res.send(`hello API`)
});

// Admin Register
app.post('/api/adminregister', async (req, res) => {
     try {
          let existingadmin = await User.findOne({ email: req.body.email });
          if (!!existingadmin) {
               return res.status(409).send({
                    success: false,
                    message: "Admin Already Registered!"
               })
          } else {
               const user = new User({
                    firstname: req.body.firstname,
                    lastname: req.body.lastname,
                    email: req.body.email,
                    phone: req.body.phone,
                    password: await bcrypt.hash(req.body.password, 10),
                    role: "admin",
               })
               await user.save();
               return res.status(200).send({
                    success: true,
                    message: "Successfully Registered",
                    user: user
               })
          }
     } catch (error) {
          console.log(error);
          res.status(404).send({
               success: false,
               message: "Something went wrong",
               error
          });
     }
});

// Login
app.post('/api/login', async (req, res) => {
     try {
          const user = await User.findOne({ email: req.body.email });
          if (!!user) {
               const hashedPassword = await bcrypt.compare(req.body.password, user.password);
               if (!!hashedPassword) {
                    const expiresIn = 20000;
                    const token = jwt.sign({ user }, process.env.JWT_SECRET, { expiresIn });
                    return res.status(200).send({
                         success: true,
                         message: "Login Successful",
                         result: { token, expiresIn }
                    })
               } else {
                    return res.status(401).send({
                         success: false,
                         message: "Invalid Password",
                    })
               }
          } else {
               return res.status(400).send({
                    success: false,
                    message: "User Not Found",
               })
          }
     } catch (error) {
          console.log(error);
          res.status(404).send({
               success: false,
               message: "Something went wrong",
               error
          });
     }
});

// Logout
app.post('/api/logout', (req, res) => {
     res.json({ success: true, message: 'Logout Successful' });
});

// Protected Route 
const protectedRoute = express.Router();
app.use(authMiddleware);

// Get User
protectedRoute.get('/api/getuser', async (req, res) => {
     try {
          // Get the user ID from req.user
          const userId = req.user._id;
          // Find the user by ID
          const user = await User.findById(userId);
          if (!user) {
               return res.status(404).send({ success: false, message: 'User not found' });
          }
          // Return the user information
          return res.status(200).send({
               success: true,
               message: 'User information retrieved successfully',
               user: user,
          });
     } catch (error) {
          console.error(error);
          return res.status(500).send({
               success: false,
               message: 'Something went wrong',
               error: error.message,
          });
     }
});

// Update User
protectedRoute.put('/api/updateuser/:id', async (req, res) => {
     try {
          // Get the user ID from req.user
          const userId = req.params.id;
          // Find the user by ID
          const user = await User.findById(userId);
          if (!user) {
               return res.status(404).send({ success: false, message: 'User not found' });
          }
          // Update user information based on request body
          user.firstname = req.body.firstname || user.firstname;
          user.lastname = req.body.lastname || user.lastname;
          user.email = req.body.email || user.email;
          user.phone = req.body.phone || user.phone;
          // Save the updated user to the database
          await user.save();

          return res.status(200).send({
               success: true,
               message: 'User updated successfully',
               user: user,
          });
     } catch (error) {
          console.error(error);
          return res.status(500).send({
               success: false,
               message: 'Something went wrong',
               error: error.message,
          });
     }
});
app.use(protectedRoute);



Schema.js
const mongoose = require('mongoose')
const User = new mongoose.Schema({
     firstname: { type: String, required: true },
     lastname: { type: String, required: true },
     phone: { type: Number, required: true },
     email: { type: String, required: true, unique: true },
     password: { type: String, required: true },
     role: { type: String }
}, { timestamps: true })
const model = new mongoose.model("Panel-Project", User)
module.exports = model



middleware.js
const jwt = require("jsonwebtoken");
const authMiddleware = (req, res, next) => {
     const token = req.headers.authorization;
     if (!token) {
          return res.status(401).send({ success: false, message: "Authorization Headers Missing" });
     }
     try {
          const tokenWithoutBearer = token.replace('Bearer ', '');
          const decoded = jwt.verify(tokenWithoutBearer, process.env.JWT_SECRET);
          req.user = decoded.user;
          next();
     } catch (error) {
          if (error.name === 'TokenExpiredError') {
               return res.status(401).send({ success: false, message: 'Token has Expired' });
          }
          return res.status(401).send({ success: false, message: "Invalid Token" });
     }
};
module.exports = authMiddleware;




package.json
"dependencies": {
    "bcrypt": "^5.1.0",
    "body-parser": "^1.20.2",
    "colors": "^1.4.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.1",
    "mongoose": "^7.4.1",
    "morgan": "^1.10.0",
    "nodemon": "^3.0.1"
  }