import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import { store, persistor } from "redux/Store";
import { PersistGate } from "redux-persist/integration/react";
import { Auth0Provider } from "@auth0/auth0-react";
import { BrowserRouter as Router } from "react-router-dom";

const domainId = "dev-1x51ocfjf18nwb0k.us.auth0.com";
const clientId = "9oaRmFO3L2wIKfp1wcIAsbiuj9CRcwZK";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <Router>
    <Auth0Provider domain={domainId} clientId={clientId}>
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <App />
        </PersistGate>
      </Provider>
    </Auth0Provider>
  </Router>
);






import React from "react";
import { Navigate, Route, Routes } from "react-router-dom";
import LoginPage from "pages/Login/LoginPage";
import Layout from "components/Layout/Layout";
import Dashboard from "pages/Dashboard/DashboardPage";
import ProfilePage from "pages/Profile/ProfilePage/ProfilePage";
import ProfileUpdatePage from "pages/Profile/ProfileUpdatePage/ProfileUpdatePage";
import { AuthProvider } from "context/authContext";

function App() {
  return (
    <AuthProvider>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/" element={<Layout />}>
          <Route index element={<Navigate to="/dashboard" replace />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/profile" element={<ProfilePage />} />
          <Route
            path="/profile/updateprofile/:id"
            element={<ProfileUpdatePage />}
          />
        </Route>
      </Routes>
    </AuthProvider>
  );
}

export default App;
















// import React from "react";
// import useAuth from "../context/authContext";
// import { Navigate, useLocation } from "react-router-dom";
// import { useSelector } from "react-redux";

// const ProtectedRoute = ({ children }: any) => {
//   const { authed }: any = useAuth();
//   const { location }: any = useLocation();
//   const accessToken = useSelector((state: any) => state.LoginAuthReducer.token);

//   return (
//     <>
//       {authed === true || accessToken ? (
//         children
//       ) : (
//         <Navigate to={"/login"} replace state={location?.pathname} />
//       )}
//     </>
//   );
// };

// export default ProtectedRoute;
import React from "react";

const ProtectedRoute = () => {
  return <div>ProtectedRoute</div>;
};

export default ProtectedRoute;


















import React from "react";
import { useAuth0 } from "@auth0/auth0-react";
import { Container, Typography, Button } from "@mui/material";
import Loader from "loader/Loader";

const Profile: React.FC = () => {
  const { user, isAuthenticated, isLoading } = useAuth0();

  if (isLoading) {
    return <Loader />;
  }

  return (
    <Container maxWidth="md">
      <Typography className="profile-title">User Profile</Typography>
      {isAuthenticated ? (
        <div>
          <Typography variant="body1" gutterBottom>
            <span className="label">Name:</span>{" "}
            <span className="label-info">{user?.name}</span>
          </Typography>
          <Typography variant="body1" gutterBottom>
            <span className="label">Email:</span>{" "}
            <span className="label-info">{user?.email}</span>
          </Typography>
          {/* Other profile information here */}
          <Button
            variant="contained"
            color="primary"
            style={{ marginTop: "5px !important" }}
            onClick={() => {
              // Handle profile update
            }}
          >
            Update Profile
          </Button>
        </div>
      ) : (
        <div>
          <Typography variant="body1" gutterBottom>
            Please log in to view your profile.
          </Typography>
        </div>
      )}
    </Container>
  );
};

export default Profile;











import React from "react";
import { useAuth0 } from "@auth0/auth0-react";
import { Button } from "@mui/material";

const Login: React.FC = () => {
  const { loginWithRedirect } = useAuth0();

  return (
    <div>
      <h1>Login Page</h1>
      <Button variant="contained" onClick={() => loginWithRedirect()}>
        Log In
      </Button>
    </div>
  );
};

export default Login;

















import React, { createContext, useContext, useEffect, useState } from "react";
import {
  // Auth0Provider,
  useAuth0,
} from "@auth0/auth0-react";

interface AuthContextType {
  authed: boolean;
  loginHandle: () => void;
  logoutHandle: () => void;
}

const authContext = createContext<AuthContextType | null>(null);

export const AuthProvider = ({ children }: any) => {
  const [authed, setAuthed] = useState(false);
  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();

  const loginHandle = () => {
    loginWithRedirect();
  };

  const logoutHandle = () => {
    // logout({ returnTo: window.location.origin });
    logout();
  };

  useEffect(() => {
    if (isAuthenticated) {
      setAuthed(true);
    } else {
      setAuthed(false);
    }
  }, [isAuthenticated]);

  return (
    // <Auth0Provider
    //   domain={"dev-1x51ocfjf18nwb0k.us.auth0.com"}
    //   clientId={"9oaRmFO3L2wIKfp1wcIAsbiuj9CRcwZK"}
    //   // redirectUri={window.location.origin}
    // >
    <authContext.Provider value={{ authed, loginHandle, logoutHandle }}>
      {children}
    </authContext.Provider>
    // </Auth0Provider>
  );
};

export function useAuth() {
  return useContext(authContext);
}












import React from "react";
import {
  Divider,
  Grid,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Tooltip,
  Zoom,
} from "@mui/material";
import { Dashboard, Logout, Person } from "@mui/icons-material";
import "../Sidebar/Sidebar.css";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { logout } from "redux/Action";
// import useAuth from "../../context/authContext";
import { NavLink } from "react-router-dom";

const Sidebar = (): JSX.Element => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  // const { logoutHandle }: any = useAuth();

  const handleLogout = async () => {
    await dispatch<any>(logout());
    // logoutHandle();
    navigate("/login");
  };
  return (
    <>
      <Grid className="sidebar">
        <Grid item lg={12} sm={6} xs={3}>
          <Toolbar />
          <Divider />

          <NavLink to={"/dashboard"} className={"link"}>
            <ListItem disablePadding className="sidebar-item">
              <Tooltip
                title={"Dashboard"}
                arrow
                TransitionComponent={Zoom}
                enterDelay={800}
                leaveDelay={200}
                placement="bottom"
              >
                <ListItemButton className="sidebar-listitem-btn">
                  <ListItemIcon className="sidebar-icon">
                    <Dashboard />
                  </ListItemIcon>
                  <ListItemText
                    primary="Dashboard"
                    sx={{ whiteSpace: "nowrap" }}
                  />
                </ListItemButton>
              </Tooltip>
            </ListItem>
          </NavLink>
          <Divider />

          <NavLink to={"/profile"} className={"link"}>
            <ListItem disablePadding className="sidebar-item">
              <Tooltip
                title={"Profile"}
                arrow
                TransitionComponent={Zoom}
                enterDelay={800}
                leaveDelay={200}
                placement="bottom"
              >
                <ListItemButton className="sidebar-listitem-btn">
                  <ListItemIcon className="sidebar-icon">
                    <Person />
                  </ListItemIcon>
                  <ListItemText
                    primary="Profile"
                    sx={{ whiteSpace: "nowrap" }}
                  />
                </ListItemButton>
              </Tooltip>
            </ListItem>
          </NavLink>
          <Divider />

          <ListItem disablePadding className="sidebar-item logout">
            <Tooltip
              title={"Logout"}
              arrow
              TransitionComponent={Zoom}
              enterDelay={800}
              leaveDelay={200}
              placement="bottom"
            >
              <ListItemButton
                className="sidebar-listitem-btn"
                onClick={handleLogout}
              >
                <ListItemIcon className="sidebar-icon">
                  <Logout />
                </ListItemIcon>
                <ListItemText primary="Logout" sx={{ whiteSpace: "nowrap" }} />
              </ListItemButton>
            </Tooltip>
          </ListItem>
          <Divider />
        </Grid>
      </Grid>
    </>
  );
};

export default Sidebar;
