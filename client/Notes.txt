index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import store from "redux/Store";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);





App.tsx
import React from "react";
import "./App.css";
import { BrowserRouter, Navigate, Route, Routes } from "react-router-dom";
import LoginPage from "pages/Login/LoginPage";
import Layout from "components/Layout/Layout";
import Dashboard from "pages/Dashboard/Dashboard";

function App() {
  return (
    <>
      <BrowserRouter>
        <Routes>
          <Route path="/login" element={<LoginPage />} />
          <Route path="/" element={<Layout />}>
            <Route index element={<Navigate to="/dashboard" replace />} />
            <Route path="/dashboard" element={<Dashboard />} />
          </Route>
        </Routes>
      </BrowserRouter>
    </>
  );
}

export default App;





redux/Reducer.tsx
import { AuthActionTypes } from "./types/authTypes";
import { combineReducers } from "redux";

interface AuthState {
  token: string | null;
  error: string | null;
}

const initialLoginState = {
  token: localStorage.getItem("auth"),
  error: null,
};
const LoginAuthReducer = (
  state = initialLoginState,
  action: any
): AuthState => {
  switch (action.type) {
    case AuthActionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        token: action.payload,
        error: null,
      };
    case AuthActionTypes.LOGIN_FAILURE:
      return {
        ...state,
        token: null,
        error: action.payload,
      };
    case AuthActionTypes.LOGOUT:
      return {
        ...state,
        token: null,
        error: null,
      };
    default:
      return state;
  }
};

const rootReducer = combineReducers({
  LoginAuthReducer,
});
export default rootReducer;





redux/Store.tsx
import { configureStore } from "@reduxjs/toolkit";
import thunk from "redux-thunk";
import rootReducer from "./Reducer";

const store = configureStore({ reducer: rootReducer, middleware: [thunk] });

export default store;





redux/Action.ts
import axios from "axios";
import { Dispatch } from "redux";
import { AuthActionTypes } from "./types/authTypes";

interface LoginRequestPayload {
  email: string;
  password: string;
}

export const login =
  (payload: LoginRequestPayload) => async (dispatch: Dispatch) => {
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API}/api/login`,
        payload
      );
      const { token } = response.data.result;
      localStorage.setItem("auth", token);
      dispatch({ type: AuthActionTypes.LOGIN_SUCCESS, payload: token });
      return response;
    } catch (error: any) {
      console.log(error);
      dispatch({
        type: AuthActionTypes.LOGIN_FAILURE,
        payload: error.response.data.message,
      });
      throw error;
    }
  };

export const logout = () => (dispatch: Dispatch) => {
  localStorage.removeItem("auth");
  dispatch({ type: AuthActionTypes.LOGOUT });
};





redux/types/authType.ts
export const AuthActionTypes = {
  LOGIN_SUCCESS: "LOGIN_SUCCESS",
  LOGIN_FAILURE: "LOGIN_FAILURE",
  LOGOUT: "LOGOUT",
};





pages/Login/LoginPage.tsx
import React, { useEffect, useState } from "react";
import {
  TextField,
  Button,
  Container,
  Box,
  Typography,
  InputAdornment,
  IconButton,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { useDispatch } from "react-redux";
import { login } from "redux/Action";
import { useNavigate } from "react-router-dom";

const LoginPage = (): JSX.Element => {
  const [email, setEmail] = useState<any>("");
  const [password, setPassword] = useState<any>("");
  const [error, setError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleMouseDownPassword = (event: any) => event.preventDefault();
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const showErrorWithTimeout = (errorMessage: string, timeout: number) => {
    setError(errorMessage);
    setTimeout(() => {
      setError(null);
    }, timeout);
  };
  useEffect(() => {
    setError(null);
  }, [email, password]);

  const handleLogin = async (e: any) => {
    e.preventDefault();
    if (!email && !password) {
      showErrorWithTimeout("Please Enter both Email and Password", 3000);
      return;
    }
    if (!email) {
      showErrorWithTimeout("Please Enter a Valid Email", 3000);
      return;
    }
    if (!password) {
      showErrorWithTimeout("Please Enter a Valid Password", 3000);
      return;
    }
    try {
      const response = await dispatch<any>(
        login({ email: email, password: password })
      );
      if (!!response && response.data.success === true) {
        navigate("/");
      }
      setEmail("");
      setPassword("");
    } catch (error: any) {
      console.log(error);
      showErrorWithTimeout(error.response.data.message, 3000);
    }
  };

  return (
    <>
      <Container component="main" maxWidth="xs">
        <Box
          sx={{
            marginTop: 8,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Typography variant="h4" component="h1">
            Login
          </Typography>
          {error && <Typography color="error">{error}</Typography>}
          <form onSubmit={handleLogin}>
            <TextField
              margin="normal"
              fullWidth
              id="email"
              label="Email"
              type="email"
              value={email}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setEmail(e.target.value)}
            />
            <TextField
              margin="normal"
              autoComplete="action"
              fullWidth
              id="password"
              label="Password"
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setPassword(e.target.value)}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <Button
              type="submit"
              fullWidth
              size="large"
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              Login
            </Button>
          </form>
        </Box>
      </Container>
    </>
  );
};

export default LoginPage;





pages/Dashboard/DashboardPage.tsx
import React from "react";

const Dashboard = (): JSX.Element => {
  return (
    <div>
      <h1>Dashboard</h1>
    </div>
  );
};

export default Dashboard;





components/Navbar/Navbar.tsx
import React, { useState } from "react";
import { AppBar, Grid, Toolbar, Typography } from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import "../Navbar/Navbar.css";

const Navbar = ({ toogleSidebar }: any): JSX.Element => {
  const [isOpen, setOpen] = useState<boolean>(false);
  const toogleSiderbar = () => {
    setOpen(!isOpen);
    toogleSidebar(isOpen);
  };
  return (
    <div>
      <Grid className="navbar">
        <AppBar>
          <Toolbar className="toolbar-navbar">
            <MenuIcon className="menu-icon" onClick={toogleSiderbar} />
            <Typography className="navbar-title">Admin Panel</Typography>
          </Toolbar>
        </AppBar>
      </Grid>
    </div>
  );
};

export default Navbar;





components/Sidebar/Sidebar.tsx
import React from "react";
import {
  Divider,
  Grid,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Toolbar,
} from "@mui/material";
import { Dashboard, Logout } from "@mui/icons-material";
import "../Sidebar/Sidebar.css";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { logout } from "redux/Action";

const Sidebar = (): JSX.Element => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const Out = () => {
    navigate("/login");
    dispatch<any>(logout());
  };
  return (
    <>
      <Grid className="sidebar">
        <Grid item lg={12} sm={6} xs={3}>
          <Toolbar />
          <Divider />
          <ListItem disablePadding className="sidebar-item">
            <ListItemButton className="sidebar-listitem-active-btn">
              <ListItemIcon className="sidebar-icon">
                <Dashboard />
              </ListItemIcon>
              <ListItemText primary="Dashboard" sx={{ whiteSpace: "nowrap" }} />
            </ListItemButton>
          </ListItem>
          <Divider />

          <ListItem disablePadding className="sidebar-item logout">
            <ListItemButton
              className="sidebar-listitem-active-btn"
              onClick={Out}
            >
              <ListItemIcon className="sidebar-icon">
                <Logout />
              </ListItemIcon>
              <ListItemText primary="Logout" sx={{ whiteSpace: "nowrap" }} />
            </ListItemButton>
          </ListItem>
          <Divider />
        </Grid>
      </Grid>
    </>
  );
};

export default Sidebar;





components/Layout/Layout.tsx
import { Grid } from "@mui/material";
import React, { useState } from "react";
import "../Layout/Layout.css";
import { Outlet } from "react-router-dom";
import Sidebar from "../Sidebar/Sidebar";
import Navbar from "../Navbar/Navbar";

const Layout = (): JSX.Element => {
  const [isOpen, setIsClose] = useState<boolean>(true);

  const toogleSidebar = (data: boolean | ((prevState: boolean) => boolean)) => {
    setIsClose(data);
  };
  return (
    <div>
      <Grid className="layout">
        <Grid className={isOpen ? "layout-sidebar" : "layout-sidebar-sm"}>
          <Sidebar />
        </Grid>
        <Grid className="layout-navbar">
          <Navbar toogleSidebar={toogleSidebar} />
        </Grid>
        <Grid className="outlet">
          <Outlet />
        </Grid>
      </Grid>
    </div>
  );
};

export default Layout;
