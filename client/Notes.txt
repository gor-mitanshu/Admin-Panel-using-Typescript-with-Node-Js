import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { Provider } from "react-redux";
import { store, persistor } from "redux/Store";
import { PersistGate } from "redux-persist/integration/react";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <App />
    </PersistGate>
  </Provider>
);





App.tsx
import React from "react";
import "./App.css";
import { BrowserRouter, Navigate, Route, Routes } from "react-router-dom";
import LoginPage from "pages/Login/LoginPage";
import Layout from "components/Layout/Layout";
import Dashboard from "pages/Dashboard/Dashboard";
import { AuthProvider } from "context/authContext";
import ProtectedRoute from "protectedRoute/ProtectedRoute";

function App() {
  return (
    <>
      <AuthProvider>
        <BrowserRouter>
          <Routes>
            <Route path="/login" element={<LoginPage />} />
            <Route
              path="/"
              element={
                <ProtectedRoute>
                  <Layout />
                </ProtectedRoute>
              }
            >
              <Route index element={<Navigate to="/dashboard" replace />} />
              <Route
                path="/dashboard"
                element={
                  <ProtectedRoute>
                    <Dashboard />
                  </ProtectedRoute>
                }
              />
            </Route>
          </Routes>
        </BrowserRouter>
      </AuthProvider>
    </>
  );
}

export default App;





Action.ts
import axios from "axios";
import { Dispatch } from "redux";
import { AuthActionTypes } from "./types/authTypes";

interface LoginRequestPayload {
  email: string;
  password: string;
}

export const login =
  (payload: LoginRequestPayload) => async (dispatch: Dispatch) => {
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API}/api/login`,
        payload
      );
      const { token } = response.data.result;
      // localStorage.setItem("auth", token);
      dispatch({ type: AuthActionTypes.LOGIN_SUCCESS, payload: token });
      return response;
    } catch (error: any) {
      console.log(error);
      dispatch({
        type: AuthActionTypes.LOGIN_FAILURE,
        payload: error.response.data.message,
      });
      throw error;
    }
  };

export const logout = () => (dispatch: Dispatch) => {
  // localStorage.removeItem("auth");
  dispatch({ type: AuthActionTypes.LOGOUT });
};





Reducer.ts
import { AuthActionTypes } from "./types/authTypes";
import { combineReducers } from "redux";

interface AuthState {
  token: string | null;
  error: string | null;
}

const initialLoginState = {
  token: localStorage.getItem("auth"),
  error: null,
};
const LoginAuthReducer = (
  state = initialLoginState,
  action: any
): AuthState => {
  switch (action.type) {
    case AuthActionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        token: action.payload,
        error: null,
      };
    case AuthActionTypes.LOGIN_FAILURE:
      return {
        ...state,
        token: null,
        error: action.payload,
      };
    case AuthActionTypes.LOGOUT:
      return {
        ...state,
        token: null,
        error: null,
      };
    default:
      return state;
  }
};

const rootReducer = combineReducers({
  LoginAuthReducer,
});
export default rootReducer;





Store.ts
import { configureStore } from "@reduxjs/toolkit";
import thunk from "redux-thunk";
import rootReducer from "./Reducer";
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";

const persistConfig = {
  key: "auth",
  storage,
  whitelist: ["LoginAuthReducer"],
};

const persistedReducer = persistReducer(persistConfig, rootReducer);
const store = configureStore({
  reducer: persistedReducer,
  middleware: [thunk],
});
const persistor = persistStore(store);

export { store, persistor };





Type.ts
export const enum AuthActionTypes {
  LOGIN_SUCCESS = "LOGIN_SUCCESS",
  LOGIN_FAILURE = "LOGIN_FAILURE",
  LOGOUT = "LOGOUT",
}





ProtectedRoute.tsx
import React from "react";
import useAuth from "../context/authContext";
import { Navigate, useLocation } from "react-router-dom";

const ProtectedRoute = ({ children }: any) => {
  const { authed }: any = useAuth();
  const { location }: any = useLocation();
  const checkToken = localStorage.getItem("auth");

  return (
    <>
      {authed === true ? (
        children
      ) : checkToken ? (
        children
      ) : (
        <Navigate to={"/login"} replace state={location?.pathname} />
      )}
    </>
  );
};

export default ProtectedRoute;





Login.tsx
import React, { useEffect, useState } from "react";
import {
  TextField,
  Button,
  Container,
  Box,
  Typography,
  InputAdornment,
  IconButton,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { useDispatch } from "react-redux";
import { login } from "redux/Action";
import { useNavigate } from "react-router-dom";
import useAuth from "../../context/authContext";

const LoginPage = (): JSX.Element => {
  const [email, setEmail] = useState<any>("");
  const [password, setPassword] = useState<any>("");
  const [error, setError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const handleClickShowPassword = () => setShowPassword(!showPassword);
  const handleMouseDownPassword = (event: any) => event.preventDefault();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loginHandle }: any = useAuth();

  const showErrorWithTimeout = (errorMessage: string, timeout: number) => {
    setError(errorMessage);
    setTimeout(() => {
      setError(null);
    }, timeout);
  };
  useEffect(() => {
    setError(null);
  }, [email, password]);

  const handleLogin = async (e: any) => {
    e.preventDefault();
    if (!email && !password) {
      showErrorWithTimeout("Please Enter both Email and Password", 4000);
      return;
    }
    if (!email) {
      showErrorWithTimeout("Please Enter a Valid Email", 4000);
      return;
    }
    if (!password) {
      showErrorWithTimeout("Please Enter a Valid Password", 4000);
      return;
    }
    try {
      const response = await dispatch<any>(
        login({ email: email, password: password })
      );
      if (!!response && response.data.success === true) {
        loginHandle();
        navigate("/");
      }
      setEmail("");
      setPassword("");
    } catch (error: any) {
      console.log(error);
      showErrorWithTimeout(error.response.data.message, 4000);
    }
  };

  return (
    <>
      <Container component="main" maxWidth="xs">
        <Box
          sx={{
            marginTop: 15,
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Typography variant="h4" component="h1">
            Login
          </Typography>
          {error && (
            <Typography color="error" fontWeight={700}>
              {error}
            </Typography>
          )}
          <form onSubmit={handleLogin}>
            <TextField
              margin="normal"
              fullWidth
              id="email"
              label="Email"
              type="email"
              value={email}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setEmail(e.target.value)}
            />
            <TextField
              margin="normal"
              autoComplete="action"
              fullWidth
              id="password"
              label="Password"
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(
                e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
              ) => setPassword(e.target.value)}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <Button
              type="submit"
              fullWidth
              size="large"
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              Login
            </Button>
          </form>
        </Box>
      </Container>
    </>
  );
};

export default LoginPage;





Dashboard.tsx
import { Card, CardContent, Grid, Typography } from "@mui/material";
import React from "react";

const Dashboard = (): JSX.Element => {
  // console.log(localStorage.getItem("auth"));
  return (
    <>
      <Typography variant="h3" padding={2}>
        Dashboard
      </Typography>
      <Grid padding={2}>
        <Grid item container paddingBottom={3}>
          <Grid item lg={3} sx={{ border: "1px solid black" }}>
            <Card>
              <CardContent>
                <Typography>Card 1</Typography>
                <Typography>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit. Id,
                  eligendi.
                </Typography>
              </CardContent>
            </Card>
          </Grid>

          <Grid item lg={3} sx={{ border: "1px solid black" }}>
            <Card>
              <CardContent>
                <Typography>Card 2</Typography>
                <Typography>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit. Id,
                  eligendi.
                </Typography>
              </CardContent>
            </Card>
          </Grid>

          <Grid item lg={3} sx={{ border: "1px solid black" }}>
            <Card>
              <CardContent>
                <Typography>Card 3</Typography>
                <Typography>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit. Id,
                  eligendi.
                </Typography>
              </CardContent>
            </Card>
          </Grid>

          <Grid item lg={3} sx={{ border: "1px solid black" }}>
            <Card>
              <CardContent>
                <Typography>Card 3</Typography>
                <Typography>
                  Lorem ipsum dolor sit amet consectetur adipisicing elit. Id,
                  eligendi.
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Grid>
    </>
  );
};

export default Dashboard;





Context.tsx
import React, { ReactNode, createContext, useContext, useState } from "react";

interface AuthContextType {
  authed: boolean;
  loginHandle: () => Promise<void>;
  logoutHandle: () => Promise<void>;
}

const authContext = createContext<AuthContextType | null>(null);

function useAuth(): AuthContextType {
  const [authed, setAuthed] = useState(false);

  const loginHandle = () => {
    return new Promise<void>(() => {
      setAuthed(true);
    });
  };

  const logoutHandle = () => {
    return new Promise<void>(() => {
      setAuthed(false);
    });
  };

  return {
    authed,
    loginHandle,
    logoutHandle,
  };
}

export function AuthProvider({ children }: { children: ReactNode }) {
  const auth = useAuth();
  return <authContext.Provider value={auth}>{children}</authContext.Provider>;
}

export function AuthConsumer() {
  return useContext(authContext);
}

export default AuthConsumer;





Layout.tsx
import { Grid } from "@mui/material";
import React, { useState } from "react";
import "../Layout/Layout.css";
import { Outlet } from "react-router-dom";
import Sidebar from "../Sidebar/Sidebar";
import Navbar from "../Navbar/Navbar";

const Layout = (): JSX.Element => {
  const [isOpen, setIsClose] = useState<boolean>(true);

  const toggleSidebar = () => {
    setIsClose((toogle) => !toogle);
  };
  return (
    <div>
      <Grid className="layout">
        <Grid className={isOpen ? "layout-sidebar" : "layout-sidebar-sm"}>
          <Sidebar />
        </Grid>
        <Grid className="layout-navbar">
          <Navbar toogleSidebar={toggleSidebar} />
        </Grid>
        <Grid className="outlet">
          <Outlet />
        </Grid>
      </Grid>
    </div>
  );
};

export default Layout;





Navbar.tsx
import React, { useState } from "react";
import { AppBar, Grid, Toolbar, Typography } from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import "../Navbar/Navbar.css";

const Navbar = ({ toogleSidebar }: any): JSX.Element => {
  const [isOpen, setOpen] = useState<boolean>(false);
  const toogleSiderbar = () => {
    setOpen(!isOpen);
    toogleSidebar(isOpen);
  };
  return (
    <div>
      <Grid className="navbar">
        <AppBar>
          <Toolbar className="toolbar-navbar">
            <MenuIcon className="menu-icon" onClick={toogleSiderbar} />
            <Typography className="navbar-title">Admin Panel</Typography>
          </Toolbar>
        </AppBar>
      </Grid>
    </div>
  );
};

export default Navbar;





Sidebar.tsx
import React from "react";
import {
  Divider,
  Grid,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Tooltip,
  Zoom,
} from "@mui/material";
import { Dashboard, Logout } from "@mui/icons-material";
import "../Sidebar/Sidebar.css";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { logout } from "redux/Action";
import useAuth from "../../context/authContext";

const Sidebar = (): JSX.Element => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { logoutHandle }: any = useAuth();

  const Out = () => {
    dispatch<any>(logout());
    logoutHandle();
    navigate("/login");
  };
  return (
    <>
      <Grid className="sidebar">
        <Grid item lg={12} sm={6} xs={3}>
          <Toolbar />
          <Divider />

          <ListItem disablePadding className="sidebar-item">
            <Tooltip
              title={"Dashboard"}
              arrow
              TransitionComponent={Zoom}
              enterDelay={800}
              leaveDelay={200}
              placement="bottom"
            >
              <ListItemButton className="sidebar-listitem-active-btn">
                <ListItemIcon className="sidebar-icon">
                  <Dashboard />
                </ListItemIcon>
                <ListItemText
                  primary="Dashboard"
                  sx={{ whiteSpace: "nowrap" }}
                />
              </ListItemButton>
            </Tooltip>
          </ListItem>
          <Divider />

          <ListItem disablePadding className="sidebar-item logout">
            <Tooltip
              title={"Logout"}
              arrow
              TransitionComponent={Zoom}
              enterDelay={800}
              leaveDelay={200}
              placement="bottom"
            >
              <ListItemButton
                className="sidebar-listitem-active-btn"
                onClick={Out}
              >
                <ListItemIcon className="sidebar-icon">
                  <Logout />
                </ListItemIcon>
                <ListItemText primary="Logout" sx={{ whiteSpace: "nowrap" }} />
              </ListItemButton>
            </Tooltip>
          </ListItem>
          <Divider />
        </Grid>
      </Grid>
    </>
  );
};

export default Sidebar;